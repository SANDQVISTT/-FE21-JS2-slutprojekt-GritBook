{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,mCAIO,MAAMC,EAEXC,YACkBC,EACAC,EACAC,EACAC,QAHAH,GAAAA,OACAC,SAAAA,OACAC,QAAAA,OACAC,UAAAA,EAGhBC,KAAKC,aAECA,aAGN,MAAMC,EAAaC,SAASC,eAAe,iBAErCC,EAAeF,SAASG,cAAc,OAC5CJ,EAAWK,OAAOF,GAElBA,EAAaG,UAAUC,IAAIT,KAAKJ,GAAI,gBAGpC,MAAMc,EAAkBP,SAASG,cAAc,MAE/CI,EAAgBC,UAAYX,KAAKD,UAAY,GAAGC,KAAKH,iBAAiBG,KAAKF,UAC3EO,EAAaE,OAAOG,GAGpB,MAAME,EAAYT,SAASG,cAAc,UACzCM,EAAUD,UAAY,IAElBX,KAAKH,UAAYgB,eAAeC,QAAQ,SAE1CT,EAAaE,OAAOK,GAItBA,EAAUG,iBAAiB,SAAS,KAIlC,GAFiBF,eAAeC,QAAQ,SAExBD,eAAeC,QAAQ,QACvC,CAEE,MAAME,EAASxB,EAAAyB,IAAIC,EAAAC,GAAI,iBAAmBnB,KAAKJ,IAC/CJ,EAAA4B,OAAOJ,OAINK,WAELlB,SAASmB,cAAc,IAAItB,KAAKJ,MAAMwB,UAI1C,MAAMG,EAAQ/B,EAAAyB,IAAIC,EAAAC,GAAI,kBACtB,IAAIK,EAAuB,GAC3BhC,EAAAiC,QAAQF,GAAQG,IAEd,MAAMC,EAAcD,EAASE,MAC7B,IAAK,MAAM9B,KAAW0B,EAEpB1B,EAAQuB,WAEVG,EAAW,GAEX,IAAK,MAAMK,KAAOF,EAEhBH,EAASM,KACP,IAAIpC,EACFmC,EACAF,EAAaE,GAAME,KACnBJ,EAAaE,GAAM/B,QACnB6B,EAAaE,GAAM9B,aAkE3B,WAEE,MAAMiC,EAAI7B,SAASC,eAAe,iBAClC4B,EAAEC,UAAYD,EAAEE,aAhEhBC,GAiBIR,GAfJ,WAEE,MAAMS,EAAeC,OAAOC,OAAOX,GAC7BY,EAASF,OAAOG,KAAKb,GAAc,GACzC,IAAK,IAAIc,EAAI,EAAGA,EAAIL,EAAaM,OAAQD,IAEvC,GAAIL,EAAaM,OAAS,GAC1B,CAEE,MAAMC,EAAOnD,EAAAyB,IAAIC,EAAAC,GAAI,iBAAmBoB,GACxC/C,EAAA4B,OAAOuB,IAOXC,MAIkC,MAAlC/B,eAAeC,QAAQ,QAEzBX,SAASC,eAAe,QAAQyC,MAAMC,WAAa,UAKnD3C,SAASC,eAAe,QAAQyC,MAAMC,WAAa,UACnD3C,SAASC,eAAe,QAAQW,iBAAiB,SAAUiB,IAEzDA,EAAEe,iBACF,MAAMjD,EAAUK,SAASC,eAAe,eAElC4C,EAAO,IAAIC,KACXC,EAAe,CACnBnD,UACEiD,EAAKG,cACL,KACCH,EAAKI,WAAa,GACnB,IACAJ,EAAKK,aACL,MACAL,EAAKM,WACL,IACAN,EAAKO,aACL,KAEFxB,KAAMlB,eAAeC,QAAQ,QAC7BhB,QAASA,EAAQ0D,OAIbC,EAAa,GACnBA,EAFuBjE,EAAAsC,KAAKP,GAAOM,KAEZqB,EAEvB1D,EAAAkE,OAAOnC,EAAOkC,OAQlBE,EAAAC","sources":["src/modules/messagesMusic.ts"],"sourcesContent":["import { get, ref, remove, update, onValue, push } from \"firebase/database\";\r\nimport { db } from \"./firebaseApp\";\r\nimport { logOut } from \"./logout\";\r\n\r\nexport class Messages\r\n{\r\n  constructor(\r\n    public readonly id: string,\r\n    public readonly userName: string,\r\n    public readonly message: string,\r\n    public readonly timeStamp: string\r\n  )\r\n  {\r\n    this.displayMsg();\r\n  }\r\n  private displayMsg(): void\r\n  {\r\n    //The div containing all message-divs\r\n    const msgWrapper = document.getElementById(\"messagesMusic\");\r\n    //The Div containing one message\r\n    const msgContainer = document.createElement(\"div\") as HTMLDivElement;\r\n    msgWrapper.append(msgContainer);\r\n    //Set the messages ID to the div containing the message & add styling\r\n    msgContainer.classList.add(this.id, \"chat-styling\");\r\n\r\n    //Create the userName h4 element\r\n    const userNameElement = document.createElement(\"h4\") as HTMLHeadElement;\r\n    //Set the userName and the timeStamp\r\n    userNameElement.innerText = this.timeStamp + `${this.userName} says ${this.message}`;\r\n    msgContainer.append(userNameElement);\r\n\r\n    //Create the remove button\r\n    const removeBtn = document.createElement(\"button\") as HTMLButtonElement;\r\n    removeBtn.innerText = \"X\";\r\n    //If the logged-in user is the same as message-user; append the remove-button\r\n    if (this.userName == sessionStorage.getItem(\"user\"))\r\n    {\r\n      msgContainer.append(removeBtn);\r\n    }\r\n\r\n    //Remove button event\r\n    removeBtn.addEventListener(\"click\", () =>\r\n    {\r\n      const userName = sessionStorage.getItem(\"user\");\r\n      //Check if the logged in user is the same as the user that posted the message\r\n      if (userName == sessionStorage.getItem(\"user\"))\r\n      {\r\n        //Set the reference to the post in the database & remove it\r\n        const msgRef = ref(db, \"/Topics/Music/\" + this.id);\r\n        remove(msgRef);\r\n      }\r\n    });\r\n  }\r\n  public clearDOM(): void\r\n  {\r\n    document.querySelector(`.${this.id}`).remove();\r\n  }\r\n}\r\n//Reference to the current topic in the database\r\nconst dbRef = ref(db, \"/Topics/Music/\");\r\nlet messages: Messages[] = [];\r\nonValue(dbRef, (snapshot) =>\r\n{\r\n  const messageData = snapshot.val();\r\n  for (const message of messages)\r\n  {\r\n    message.clearDOM();\r\n  }\r\n  messages = [];\r\n  //Send all the message data(key) to the database\r\n  for (const key in messageData)\r\n  {\r\n    messages.push(\r\n      new Messages(\r\n        key,\r\n        messageData[ key ].name,\r\n        messageData[ key ].message,\r\n        messageData[ key ].timeStamp\r\n      )\r\n    );\r\n  }\r\n  //Scroll to the bottom\r\n  scrollDown();\r\n  //Remove the 26th post\r\n  function postLimiter(): void\r\n  {\r\n    const messageArray = Object.values(messageData);\r\n    const index0 = Object.keys(messageData)[ 0 ];\r\n    for (let i = 0; i < messageArray.length; i++)\r\n    {\r\n      if (messageArray.length > 25)\r\n      {\r\n        //Set the reference to the post in the database & remove it\r\n        const post = ref(db, \"/Topics/Music/\" + index0);\r\n        remove(post);\r\n      }\r\n    }\r\n  }\r\n  //Check if theres too many posts\r\n  if (messageData)\r\n  {\r\n    postLimiter();\r\n  }\r\n});\r\n//If theres no logged in user, hide the \"send-button\"\r\nif (sessionStorage.getItem(\"user\") == null || undefined || \"\")\r\n{\r\n  document.getElementById(\"send\").style.visibility = \"hidden\";\r\n}\r\nelse\r\n{\r\n  //Otherwise, make the button visible\r\n  document.getElementById(\"send\").style.visibility = \"visible\";\r\n  document.getElementById(\"send\").addEventListener(\"click\", (e) =>\r\n  {\r\n    e.preventDefault();\r\n    const message = document.getElementById(\"userMessage\") as HTMLInputElement;\r\n    //Set the current timestamp\r\n    const date = new Date();\r\n    const messageToAdd = {\r\n      timeStamp:\r\n        date.getFullYear() +\r\n        \" \" +\r\n        (date.getMonth() + 1) +\r\n        \"/\" +\r\n        date.getUTCDate() +\r\n        \" - \" +\r\n        date.getHours() +\r\n        \":\" +\r\n        date.getMinutes() +\r\n        \": \",\r\n      //Get  the logged-in user\r\n      name: sessionStorage.getItem(\"user\"),\r\n      message: message.value,\r\n    };\r\n\r\n    const newKey: string = push(dbRef).key;\r\n    const newMessage = {};\r\n    newMessage[ newKey ] = messageToAdd;\r\n    //Update the database with the message data\r\n    update(dbRef, newMessage);\r\n  });\r\n}\r\nfunction scrollDown(): void\r\n{\r\n  const e = document.getElementById(\"messagesMusic\");\r\n  e.scrollTop = e.scrollHeight;\r\n}\r\nlogOut();"],"names":["$8tedJ","parcelRequire","$00c09d35d71ab33f$export$ceaacf8b390a3600","constructor","id","userName","message","timeStamp","this","displayMsg","msgWrapper","document","getElementById","msgContainer","createElement","append","classList","add","userNameElement","innerText","removeBtn","sessionStorage","getItem","addEventListener","msgRef","ref","$7McF0","db","remove","clearDOM","querySelector","$00c09d35d71ab33f$var$dbRef","$00c09d35d71ab33f$var$messages","onValue","snapshot","messageData","val","key","push","name","e","scrollTop","scrollHeight","$00c09d35d71ab33f$var$scrollDown","messageArray","Object","values","index0","keys","i","length","post","postLimiter","style","visibility","preventDefault","date","Date","messageToAdd","getFullYear","getMonth","getUTCDate","getHours","getMinutes","value","newMessage","update","$9Mg9r","logOut"],"version":3,"file":"forumMusic.060a7c1d.js.map"}